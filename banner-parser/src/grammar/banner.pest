pipeline_definition = {
    SOI ~
        ( import_declaration
        | let_statement
        | task_definition
        | job_specification
        | pipeline_specification
        | pragma
        )*
    ~ EOI
}

pragma = ${ 
    "#pragma" ~ WHITESPACE_NO_NEWLINE+ ~ identifier ~ 
        (WHITESPACE_NO_NEWLINE+ ~ pragma_identifier ~ WHITESPACE_NO_NEWLINE* ~ ";" 
        | NEWLINE ~ pragma_body ~ NEWLINE ~ "#pragma" ~ WHITESPACE+ ~ "end;")
}
pragma_identifier = !{ (ASCII_ALPHANUMERIC | "(" | ")" | "-" | "_" )+ }
pragma_body = {
    (
        !(NEWLINE ~ "#pragma" ~ WHITESPACE_NO_NEWLINE ~ "end;") 
        ~ ANY
    )*
}

let_statement = {
    "let" ~ identifier ~ "=" ~ "Image" ~ "{" ~ image_specification ~ "}"
}

image_specification = {
    "name" ~ "=" ~ image_identifier ~
    ( "," ~ "mount" ~ "=" ~ "[" ~ mount* ~ "]" )? ~
    ( "," ~ "env" ~ "=" ~ "[" ~ env_var* ~ "]" )?
}

mount = { ( string_literal | pipe_job_task_identifier | variable ) ~ "=>" ~ string_literal ~ "," }
env_var = { identifier ~ "=" ~ string_literal ~ "," }
// one of these identifiers is just a `pipeline.job.task.var` to completely differentiate the source directory from
// all other potential directories.
pipe_job_task_identifier = @{ identifier ~ ( "." ~ identifier ){3} }

task_definition = {
    (tag_definition)* ~ "task" ~ identifier ~ parameter_list ~ block
}

parameter_list = _{
    "(" ~ "image" ~ ":" ~ image_definition ~ "," ~ "execute" ~ ":" ~ string_literal ~ ")"
}

block = _{
    "{" ~ raw_string ~ "}"
}

image_definition = _{ image_identifier | variable }

variable = ${ "$" ~ "{" ~ identifier ~ "}" }
identifier = @{ (ASCII_ALPHANUMERIC | "_" | "-")+ }
//image_identifier = { (ASCII_ALPHANUMERIC | "_" | "-" | "/" | ":")+ }
image_identifier = ${ image_var | image_def }
image_def = @{ !"${" ~ (ASCII_ALPHANUMERIC | "_" | "-" | "/" | ":")+ }
image_var = @{ "${" ~ identifier ~ "}" }
string_literal = ${ raw_string | standard_string }
standard_string = ${ "\"" ~ string_content ~ "\"" }
string_content = { (!("\"") ~ ANY)* }

// raw strings was taken directly from
// https://pest.rs/book/grammars/syntax.html#the-stack-wip
raw_string = ${
    "r" ~ PUSH("#"*) ~ "\""    // push the number signs onto the stack
    ~ raw_string_interior
    ~ "\"" ~ POP               // match a quotation mark and the number signs
}

raw_string_interior = {
    (
        !("\"" ~ PEEK)    // unless the next character is a quotation mark
                          // followed by the correct amount of number signs,
        ~ ANY             // consume one character
    )*
}

WHITESPACE_NO_NEWLINE = _{ " " | "\t" }
WHITESPACE = _{ " " | "\t" | NEWLINE }
COMMENT = _{ "//" ~ (!NEWLINE ~ ANY)* }

// like: [tag: rustl3rs.com/team=platform-team]
tag_definition = _{ "[" ~ "tag" ~ ":" ~ tag ~ "]" }
tag = { tag_key ~ "=" ~ tag_value }
tag_key = { (ASCII_ALPHANUMERIC | "_" | "-" | "/" | ".")+ }
tag_value = { (ASCII_ALPHANUMERIC | "_" | "-" | "/" | ".")+ }

import_declaration = ${ "import" ~ WHITESPACE ~ URI ~ NEWLINE }
// URI parsing ðŸ˜­ðŸ¤• https://www.rfc-editor.org/rfc/rfc3986#appendix-A
// Accept basically anything as a URI on the way in, make any transformations
// that are required because of the use of variables, and then parse it a touch
// later with the iref crate.
URI = ${ scheme ~ ":" ~ "//" ~ heir_query_fragment }
scheme = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "+" | "-" | ".")* }
heir_query_fragment = @{ (ASCII_ALPHA | ASCII_DIGIT | "-" | "." | "_" | "~" | ":" | "/" | "?" | "#" | "[" | "]" | "@" | "!" | "$" | "&" | "'" | "(" | ")" | "*" | "+" | "," | ";" | "=")+ }

job_specification = { "job" ~ identifier ~ sequential_identifier_list }
pipeline_specification = { "pipeline" ~ identifier ~ sequential_identifier_list }
job_macro_marker = { "!" }

parallel_identifier_list = {
    "{" ~ (identifier ~ job_macro_marker? | sequential_identifier_list) ~ ("," ~ (identifier ~ job_macro_marker? | sequential_identifier_list))* ~ ","? ~ "}"
}
sequential_identifier_list = {
    "[" ~ (identifier ~ job_macro_marker? | parallel_identifier_list) ~ ("," ~ (identifier ~ job_macro_marker? | parallel_identifier_list))* ~ ","? ~ "]"
}
