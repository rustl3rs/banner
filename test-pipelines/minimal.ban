let rust_create_image = Image {
    name=rust,
    mount=[
        ${src} => "/source-code",
    ],
    env=[
        RUSTLOG="${log_level}",
        RUST_BACKTRACE="1",
    ]
}

let rust_build_image = Image {
    name=rust,
    mount=[
        banner.unit-test.get-source.src => "/source-code",
    ],
    env=[
        RUSTLOG="${log_level}",
        RUST_BACKTRACE="1",
    ]
}

task get-source(image: ${rust_create_image}, execute: r#"bash -eo pipefail -c"#) { r#"

cargo init --bin /source-code
cd /source-code
git init .
ls -la

"# }

task check-clippy(image: ${rust_build_image}, execute: "bash -eo pipefail -c") {
    r#"
    rustup component add clippy
    cd /source-code

    # would be good to run pedantic; but we aren't there yet.
    cargo clippy
    "#
}

task check-format(image: ${rust_build_image}, execute: "bash -eo pipefail -c") {
    r#"
    rustup component add rustfmt
    cd /source-code

    cargo fmt

    # check if there are any changes. there should not be.
    if git diff --exit-code --quiet -- HEAD; then
        echo "No changes detected."
        exit 0
    else
        echo "Changes detected."
        git diff
        exit 1
    fi
    "#
}

task test(image: ${rust_build_image}, execute: "bash -exo pipefail -c") {
    r#"
    cd /source-code

    # would be good to capture code coverage stats here.
    cargo test
    "#
}


job unit-test [
    get-source,
    {
        check-format,
        check-clippy,
    },
    test,
]

pipeline banner [
    unit-test,
]
